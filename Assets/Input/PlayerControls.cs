//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by Unity Input System.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public class PlayerControls : InputActionAsset
{
    public PlayerControls()
    {
        AddActionMaps($"{GetType().Name}Maps");
    }

    public class PlayerActions // Public class for accessibility
    {
        private readonly InputActionMap m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper.m_Wrapper; }

        public InputAction @Click => m_Wrapper.FindAction("Click", true);

        public struct MapValues
        {
            public InputAction @Click;
        }

        public void Enable()
        {
            m_Wrapper.Enable();
        }

        public void Disable()
        {
            m_Wrapper.Disable();
        }

        // Removed SetCallbacks; callbacks set externally
    }

    public PlayerActions @Player => new PlayerActions(this);

    private readonly InputActionMap m_Wrapper = new InputActionMap("Player");
    private Dictionary<string, InputActionMap> m_ActionMaps;

    public void AddActionMaps(string mapName)
    {
        m_ActionMaps = new Dictionary<string, InputActionMap> { { mapName, m_Wrapper } };
        m_Wrapper.AddAction("Click", binding: "<Mouse>/leftButton", interactions: "Press", type: InputActionType.Button);
        // Removed m_Wrapper.SetCallbacks(this); as it's not needed
    }

    public interface IPlayerActions
    {
        void OnClick(InputAction.CallbackContext context);
    }

    public void Enable()
    {
        foreach (var map in m_ActionMaps.Values) map.Enable();
    }

    public void Disable()
    {
        foreach (var map in m_ActionMaps.Values) map.Disable();
    }
}